// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let SquareVerifier = artifacts.require('SquareVerifier');
// - use the contents from proof.json generated from zokrates steps
let proofJson = require('./proof.json');

contract('SquareVerifier', accounts => {

    let contract;
    const account_one = accounts[0];

    let a = proofJson["proof"]["A"];
    let a_p = proofJson["proof"]["A_p"];
    let b = proofJson["proof"]["B"];
    let b_p = proofJson["proof"]["B_p"];
    let c = proofJson["proof"]["C"];
    let c_p = proofJson["proof"]["C_p"];
    let h = proofJson["proof"]["H"];
    let k = proofJson["proof"]["K"];
    let input = proofJson["input"];

    describe('verify tx', function () {

        beforeEach(async function () { 
            contract = await SquareVerifier.new({from: account_one});
        })

        // Test verification with correct proof
        it('correct proof', async function () { 
            result = await contract.verifyTx.call(a, a_p, b, b_p, c, c_p, h, k, input);
            assert.isTrue(result);
        })

        // Test verification with incorrect proof
        it('incorrect proof', async function () { 
            let wrongInput = [26,1];
            result = await contract.verifyTx.call(a, a_p, b, b_p, c, c_p, h, k, wrongInput);
            assert.isFalse(result);
        })
    })
 
})


